/*Разработать класс Reservoir (водоем). Класс должен обязательно иметь поле «название». Класс должен содержать:
конструктор по умолчанию, конструктор с параметрами, при необходимости реализовать деструктор и конструктор копирования.\

Добавить методы для: 
1. Определения приблизительного объема (ширина * длина * максимальная глубина);
2. Определения площади водной поверхности;
3. Метод для проверки относятся ли водоемы к одному типу (море-море; бассейн-пруд);
4. Для сравнения площади водной поверхности водоемов одного типа;
5. Для копирования объектов;
6. Остальные методы на усмотрение разработчика (методы set и get).

Написать интерфейс для работы с классом. Реализовать динамический массив объектов класса с возможностью добавления,
удаления объектов из массива. Реализовать возможность записи информации об объектах массива в текстовый файл, бинарный файл.

Используйте explicit конструктор и константные функции-члены (например, для отображения данных о водоёме и т.д.).*/

#include<iostream>
#include<string>


class Reservoir //Разработать класс Reservoir (водоем).
{
	std::string name; // Класс должен обязательно иметь поле «название».
	int width, length, maximum_depth; // ширина,  длина,  максимальная глубина

public:

	Reservoir() :name{ "unknown" }, width{ 0 }, length{ 0 }, maximum_depth{ 0 }{};//конструктор по умолчанию,
	
	Reservoir(std::string n_name, int n_w, int n_l, int n_m) //конструктор с параметрами,
	{
		name = n_name, width = n_w, length = n_l, maximum_depth = n_m;
	};
	~Reservoir() {};

	
};


int main()
{
	
	

	return 0;

}